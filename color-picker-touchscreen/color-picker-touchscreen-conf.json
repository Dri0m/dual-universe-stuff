{
    "slots": {
        "0": {
            "name": "screen",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "1": {
            "name": "light",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "2": {
            "name": "slot3",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "3": {
            "name": "slot4",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "4": {
            "name": "slot5",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "5": {
            "name": "slot6",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "6": {
            "name": "slot7",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "7": {
            "name": "slot8",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "8": {
            "name": "slot9",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "9": {
            "name": "slot10",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-1": {
            "name": "unit",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-2": {
            "name": "system",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-3": {
            "name": "library",
            "type": {
                "events": [],
                "methods": []
            }
        }
    },
    "handlers": [{
            "code": "screen.setCenteredText(\"color picker touchscreen\")",
            "filter": {
                "args": [],
                "signature": "stop()",
                "slotKey": "-1"
            },
            "key": "0"
        },
        {
            "code": "local gradientSVG = [[\n    <svg class=\"bootstrap\" viewBox=\"0 0 1920 1080\" style=\"width:100%; height:100%\" preserveAspectRatio=\"none\">\n        <defs>\n            <linearGradient id=\"rainbow\">\n                <stop offset=\"0%\" stop-color=\"#ff0000\" />\n                <stop offset=\"17%\" stop-color=\"#ffff00\" />\n                <stop offset=\"34%\" stop-color=\"#00ff00\" />\n                <stop offset=\"50%\" stop-color=\"#00ffff\" />\n                <stop offset=\"66%\" stop-color=\"#0000ff\" />\n                <stop offset=\"82%\" stop-color=\"#ff00ff\" />\n                <stop offset=\"100%\" stop-color=\"#ff0000\" />\n            </linearGradient>\n            <linearGradient id=\"black\" gradientTransform=\"rotate(90)\">\n                <stop offset=\"0.5\" stop-color=\"black\" stop-opacity=\"0\" />\n                <stop offset=\"1\" stop-color=\"black\" stop-opacity=\"1\" />\n            </linearGradient>\n            <linearGradient id=\"white\" gradientTransform=\"rotate(90)\">\n                <stop offset=\"0\" stop-color=\"white\" stop-opacity=\"1\" />\n                <stop offset=\"0.5\" stop-color=\"white\" stop-opacity=\"0\" />\n            </linearGradient>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" fill=\"url(#rainbow)\" />\n        <rect width=\"100%\" height=\"100%\" fill=\"url(#black)\" />\n        <rect width=\"100%\" height=\"100%\" fill=\"url(#white)\" />\n    </svg>\n]]\n\nscreen.setHTML(gradientSVG)\n\n-- https://stackoverflow.com/a/14733008\nfunction HSVtoRGB(h, s, v)\n    local r, g, b\n    \n    h = math.floor(h)\n    s = math.floor(s)\n    v = math.floor(v)\n\n    if s <= 0 then\n        r = v\n        g = v\n        b = v\n        return r, g, b\n    end\n\n    local region = math.floor(h / 43)\n    local remainder = math.floor((h - (region*43)) * 6)\n    \n    local p = (v * (255 - s)) >> 8\n    local q = (v * (255 - ((s * remainder) >> 8))) >> 8\n    local t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8\n    \n    if region == 0 then\n        r = v\n        g = t\n        b = p\n    elseif region == 1 then\n        r = q\n        g = v\n        b = p\n    elseif region == 2 then\n        r = p\n        g = v\n        b = t\n    elseif region == 3 then\n        r = p\n        g = q\n        b = v\n    elseif region == 4 then\n        r = t\n        g = p\n        b = v\n    else\n        r = v\n        g = p\n        b = q\n    end\n    \n    return r, g, b\nend",
            "filter": {
                "args": [],
                "signature": "start()",
                "slotKey": "-1"
            },
            "key": "1"
        },
        {
            "code": "-- obtain mouse state\nlocal mouseX = screen.getMouseX()\nlocal mouseY = screen.getMouseY()\nlocal mouseState = screen.getMouseState()\n\n-- convert mouse coordinates to HSV\nlocal h = mouseX * 255\nlocal s = 255\nlocal v = 255\n\nif mouseY < 0.5 then\n    s = (mouseY*2) * 255\nend\n\nif mouseY > 0.5 then\n    v = (1 - ((mouseY-0.5)*2)) * 255\nend\n\n-- convert HSV to RGB which is what the lights accept\nr, g, b = HSVtoRGB(h, s, v)\n\n-- set light color if holding lmb\nif mouseState == 1 then\n\tlight.setRGBColor(r,g,b)\nend\n\n\n-- print stuff to console\n--system.print(string.format(\"x: %.1f, y: %.1f, state: %d\", mouseX, mouseY, mouseState))\n--system.print(string.format(\"H: %.1f, S: %.1f, V: %.1f\", h, s, v))\n--system.print(string.format(\"R: %.1f, G: %.1f, B: %.1f\", r, g, b))",
            "filter": {
                "args": [],
                "signature": "update()",
                "slotKey": "-2"
            },
            "key": "2"
        }
    ],
    "methods": [],
    "events": []
}